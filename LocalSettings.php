<?php

# This file was automatically generated by the MediaWiki installer.
# If you make manual changes, please keep track in case you need to
# recreate them later.
#
# See includes/DefaultSettings.php for all configurable settings
# and their default values, but don't forget to make changes in _this_
# file, not there.
#
# Further documentation for configuration settings may be found at:
# http://www.mediawiki.org/wiki/Manual:Configuration_settings

# If you customize your file layout, set $IP to the directory that contains
# the other MediaWiki files. It will be used as a base to locate files.


# Protect against web entry
if ( !defined( 'MEDIAWIKI' ) ) {
	exit;
}

$wgReadOnly         = "This wiki is a historical archive and is no longer editable.";

// $wgServer           = "http://wiki.commonjs.org";
$wgSitename         = "CommonJS Spec Wiki";
$wgMetaNamespace    = "CommonJS";

## The URL base path to the directory containing the wiki;
## defaults for all runtime URL paths are based off of this.
## For more information on customizing the URLs please see:
## http://www.mediawiki.org/wiki/Manual:Short_URL
$wgScriptPath       = "";
$wgScriptExtension  = ".php";
$wgArticlePath      = "/wiki/$1";
$wgUsePathInfo      = true;
$wgLogo             = "/images/b/bc/Wiki.png";

## UPO means: this is also a user preference option

$wgEnableEmail      = true;
$wgEnableUserEmail  = true; # UPO

$wgEmergencyContact = "commonjs@wiki-tools.com";
$wgPasswordSender = "commonjs@wiki-tools.com";

// $wgSMTP = array(
// );

$wgEnotifUserTalk = true; # UPO
$wgEnotifWatchlist = true; # UPO
$wgEmailAuthentication = true;
$wgUserEmailUseReplyTo = true;

## Database settings
$wgDBtype           = "sqlite";
$wgDBserver         = "";
$wgDBname           = "wikidb";
$wgDBuser           = "";
$wgDBpassword       = "";
$wgDBadminuser      = $wgDBuser;
$wgDBadminpassword  = $wgDBpassword;
$wgSQLiteDataDir    = __DIR__;

# MySQL specific settings
$wgDBprefix         = "";

# MySQL table options to use during installation or update
$wgDBTableOptions   = "ENGINE=InnoDB, DEFAULT CHARSET=binary";

# Experimental charset support for MySQL 4.1/5.0.
$wgDBmysql5 = true;

## Shared memory settings
$wgMainCacheType = CACHE_ACCEL;
#$wgMemCachedServers = array (
#  0 => 'localhost:11211',
#);

$wgUseSquid = true;
$wgUsePrivateIPs = true;
$wgShowIPinHeader = false;

#$wgJobRunRate = 0;

## To enable image uploads, make sure the 'images' directory
## is writable, then set this to true:
$wgEnableUploads = true;
$wgGenerateThumbnailOnParse = false;
$wgAllowCopyUploads = true;
$wgUseImageMagick = true;
$wgImageMagickConvertCommand = "/usr/bin/convert";
#$wgGenerateThumbnailOnParse = false;
$wgMaxShellMemory = 102400 * 3; // Default appears to be too low for ImageMagick?
$wgMaxShellTime = 5; // If it can't do it quickly, we don't want it hogging ram
//$wgFileStore['deleted']['directory'] = "/usr/web/sites/monkeyscript.org/commonjs-deleted";

$wgFileExtensions[] = 'cjs';
$wgFileExtensions[] = 'xcf';

## If you use ImageMagick (or any other shell command) on a
## Linux server, this will need to be set to the name of an
## available UTF-8 locale
$wgShellLocale = "en_CA.utf8";

## If you want to use image uploads under safe mode,
## create the directories images/archive, images/thumb and
## images/temp, and make them all writable. Then uncomment
## this, if it's not already uncommented:
# $wgHashedUploadDirectory = false;

## If you have the appropriate support software installed
## you can enable inline LaTeX equations:
$wgUseTeX           = false;

$wgLocalInterwiki   = strtolower( $wgSitename );

$wgLanguageCode = "en";

$wgSecretKey = "!0PLvVZuUxr4p#AyEX@RJT05";

## Default skin: you can change the default skin. Use the internal symbolic
## names, ie 'standard', 'nostalgia', 'cologneblue', 'monobook':
require_once( "$IP/skins/Modern/Modern.php" );
require_once( "$IP/skins/MonoBook/MonoBook.php" );
require_once( "$IP/skins/Vector/Vector.php" );
$wgDefaultSkin = 'vector';

## For attaching licensing metadata to pages, and displaying an
## appropriate copyright notice / icon. GNU Free Documentation
## License and Creative Commons licenses are supported so far.
# $wgEnableCreativeCommonsRdf = true;
$wgRightsPage = ""; # Set to the title of a wiki page that describes your license/copyright
$wgRightsUrl = "";
$wgRightsText = "";
$wgRightsIcon = "";
# $wgRightsCode = ""; # Not yet used

$wgDiff3 = "/usr/bin/diff3";

# When you make changes to this configuration file, this will make
# sure that cached pages are cleared.
$wgCacheEpoch = max( $wgCacheEpoch, gmdate( 'YmdHis', @filemtime( __FILE__ ) ) );

$wgUseNPPatrol = true;
$wgUseRCPatrol = true;
$wgDisableAnonTalk = true;

$wgGroupPermissions['*']['edit']             = false;
$wgGroupPermissions['*']['createpage']       = false;
$wgGroupPermissions['*']['createtalk']       = true;
$wgGroupPermissions['*']['writeapi']         = false;
$wgGroupPermissions['user']['upload_by_url'] = true;
$wgGroupPermissions['user']['createpage']    = false;
$wgGroupPermissions['autoconfirmed']['createpage'] = true;
$wgGroupPermissions['editwebsite']['editwebsite'] = true;
$wgGroupPermissions['sysop']['patrol'] = true;
$wgGroupPermissions['sysop']['editwebsite'] = true;
$wgGroupPermissions['sysop']['unreviewedpages'] = true;
$wgGroupPermissions['sysop']['deleterevision']  = true;
$wgGroupPermissions['bureaucrat']['hideuser'] = true;
$wgGroupPermissions['bureaucrat']['suppressrevision'] = true;
$wgGroupPermissions['bureaucrat']['suppressionlog'] = true;
$wgGroupPermissions['autopatrol']['autopatrol'] = true;
$wgGroupPermissions['sysop']['autopatrol'] = true;
$wgGroupPermissions['sysop']['patroller'] = true;

$wgGroupPermissions['*']['noanalytics'] = false;
$wgGroupPermissions['bot']['noanalytics'] = true;
$wgGroupPermissions['sysop']['noanalytics'] = true;
$wgGroupPermissions['bureaucrat']['noanalytics'] = true;

$wgNamespacesWithSubpages = array(
	NS_MEDIA            => true,
	NS_SPECIAL          => true,
	NS_MAIN	            => true,
	NS_TALK	            => true,
	NS_USER             => true,
	NS_USER_TALK        => true,
	NS_PROJECT          => true,
	NS_PROJECT_TALK     => true,
	NS_IMAGE            => true,
	NS_IMAGE_TALK       => true,
	NS_MEDIAWIKI        => true,
	NS_MEDIAWIKI_TALK   => true,
	NS_TEMPLATE         => true,
	NS_TEMPLATE_TALK    => true,
	NS_HELP             => true,
	NS_HELP_TALK        => true,
	NS_CATEGORY	        => true,
	NS_CATEGORY_TALK    => true,
);

define("NS_WEBSITE", 200);
define("NS_WEBSITE_TALK", NS_WEBSITE+1);
$wgExtraNamespaces[NS_WEBSITE] = "Website";
$wgExtraNamespaces[NS_WEBSITE_TALK] = "Website_talk";
$wgNamespacesWithSubpages[NS_WEBSITE] = true;
$wgNoFollowNsExceptions[] = NS_WEBSITE;
$wgNamespaceProtection[NS_WEBSITE] = "editwebsite";

require_once("$IP/extensions/Nuke/SpecialNuke.php");

require_once("$IP/extensions/CheckUser/CheckUser.php");
$wgGroupPermissions['sysop']['checkuser'] = true;
unset($wgGroupPermissions['checkuser']);

require_once( "$IP/extensions/SpamBlacklist/SpamBlacklist.php" );

require_once("$IP/extensions/AntiSpoof/AntiSpoof.php");
require_once("$IP/extensions/AbuseFilter/AbuseFilter.php");
$wgGroupPermissions['sysop']['abusefilter-modify'] = true;
$wgGroupPermissions['*']['abusefilter-log-detail'] = true;
$wgGroupPermissions['*']['abusefilter-view'] = true;
$wgGroupPermissions['*']['abusefilter-log'] = true;
$wgGroupPermissions['sysop']['abusefilter-private'] = true;
$wgGroupPermissions['sysop']['abusefilter-modify-restricted'] = true;
$wgGroupPermissions['sysop']['abusefilter-revert'] = true;

# require_once("$IP/extensions/Patroller/Patroller.php");

require_once("$IP/extensions/ParserFunctions/ParserFunctions.php");
$wgPFEnableStringFunctions = true;
//require_once("$IP/extensions/StringFunctions/StringFunctions.php");
require_once("$IP/extensions/SyntaxHighlight_GeSHi/SyntaxHighlight_GeSHi.php");
$wgSyntaxHighlightDefaultLang = "javascript";
require_once("$IP/extensions/Poem/Poem.php");

#require_once("$IP/extensions/DataValues/DataValues.php");
require_once("$IP/extensions/Validator/Validator.php");
require_once("$IP/extensions/SemanticMediaWiki/SemanticMediaWiki.php");
//$smwgEnableUpdateJobs = false;
enableSemantics('wiki.commonjs.org');
require_once("$IP/extensions/SemanticForms/SemanticForms.php");
require_once("$IP/extensions/SemanticDrilldown/SemanticDrilldown.php");
require_once("$IP/extensions/SemanticInternalObjects/SemanticInternalObjects.php");

require_once("$IP/extensions/Nuke/SpecialNuke.php");

require_once("$IP/extensions/ConfirmAccount/ConfirmAccount.php");
$wgMakeUserPageFromBio = true;
$wgAutoWelcomeNewUsers = false;
$wgUseRealNamesOnly = false;
$wgRejectedAccountMaxAge = 7 * 24 * 3600; // One week
$wgConfirmAccountRejectAge = 30 * 24 * 3600; // 1 month
$wgAccountRequestMinWords = 5;
$wgConfirmAccountRequestFormItems['Biography']['minWords'] = 5;
$wgAccountRequestToS = false;
$wgAccountRequestExtraInfo = false;
$wgConfirmAccountSaveInfo = false;
$wgConfirmAccountContact = true;
$wgConfirmAccountCaptchas = true;
$wgAllowAccountRequestFiles = false;
$wgConfirmAccountContact = 'commonjs@danielfriesen.name';

/*require_once("$IP/extensions/FlaggedRevs/FlaggedRevs.php");
$wgReviewCodes = array("4b9b8bafdc993a09becea16f", "4b9b8bb0dc993a09becea170");
$wgFlaggedRevsExceptions[] = "*";
$wgSimpleFlaggedRevsUI = true;
$wgFlaggedRevsUIForDefault = true;
$wgFlaggedRevsLowProfile = false;
$wgFlaggedRevsNamespaces = array( NS_WEBSITE );
$wgFlaggedRevsAutopromote = false;
$wgFlaggedRevTags = array(
	'status' => array( 'levels' => 2, 'quality' => 1, 'pristine' => 2 ),
);
$wgFlagRestrictions = array(
	'status' => array( 'review' => 1 ),
);

$wgHooks['MakeGlobalVariablesScript'][] = 'lgGlobalVariables';
function lgGlobalVariables( &$vars ) {
	global $wgArticle;
	//$vars["wgStableRevisionId"] = FlaggedArticle::getGlobalInstance()->getStableRev();
	if ( $wgArticle ) {
		$vars["wgViewRevisionId"] = intval($wgArticle->getOldID());
		if ( $vars["wgViewRevisionId"] === 0 && $vars["wgCurRevisionId"] )
			$vars["wgViewRevisionId"] = intval($vars["wgCurRevisionId"]);
		$fa = FlaggedArticle::getGlobalInstance();
		if ( $fa ) {
			if ( $fa->pageOverride() ) {
				$srev = $fa->getStableRev();
				if ( $srev )
					$vars["wgViewRevisionId"] = $srev->getRevId();
			}
		}
	}
	return true;
}

*/

# require_once("$IP/skins/monaco/monaco.php");

#$wgHooks['OutputPageBodyAttributes'][] = 'lgOutputPageBodyAttributes';
#function lgOutputPageBodyAttributes( $out, $sk, &$bodyAttrs ) {
#	global $wgUser;
#	
#	if ( !$wgUser->isLoggedIn() )
#		$bodyAttrs['class'] .= ' loggedout';
#	
#	if ( $out->getTitle()->equals(Title::newMainPage()) )
#		$bodyAttrs['class'] .= ' mainpage';
#	
#	return true;
#}

// $wgGoogleAnalyticsAccount = "UA-20195316-2";
// $wgHooks['SkinAfterBottomScripts'][] = 'lfGAScript';
// function lfGAScript( $sk, $text='' ) {
// 	global $wgUser, $wgJsMimeType, $wgGoogleAnalyticsAccount;
// 	if ( $wgUser->isAllowed('noanalytics') ) {
// 		$text .= "<!-- Google Analytics code omitted -->\n";
// 		return true;
// 	}
// 	$text .= <<<GASCRIPT
// <script type="{$wgJsMimeType}">
// var _gaq = _gaq || [];
// _gaq.push(['_setAccount', '{$wgGoogleAnalyticsAccount}']);
// _gaq.push(['_trackPageview']);
// (function() {
// 	var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
// 	ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
// 	var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
// })();
// </script>

// GASCRIPT;
// 	return true;
// }

#$wgEnableSidebarCache = false;

$wgShowExceptionDetails = true;
